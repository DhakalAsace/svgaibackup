/** * SVG to GIF Converter Implementation *  * Converts SVG files to GIF format using CloudConvert API. * Supports quality control, resolution management, and static image conversion. * Uses ImageMagick engine through CloudConvert for high-quality conversion. */import type {   ConversionHandler,  ConversionOptions,   ConversionResult,  ImageFormat} from './types'import {   ConversionError,  UnsupportedFormatError,  CorruptedFileError,  FileValidationError} from './errors'import { validateFile, detectFileTypeFromBuffer } from './validation'import { convertWithCloudConvert, CloudConvertOptions } from './cloudconvert-client'/** * Extended conversion options for SVG to GIF */interface SvgToGifOptions extends ConversionOptions {  /** Output width in pixels */  width?: number  /** Output height in pixels */  height?: number  /** Sets the mode of resizing: 'max', 'crop', 'scale' (default: 'max') */  fit?: 'max' | 'crop' | 'scale'  /** Remove metadata such as EXIF data (default: true) */  strip?: boolean  /** Resolution in pixels per inch (default: 300) */  pixelDensity?: number}/** * Validate SVG file input */function validateSvgInput(input: Buffer | string): void {  const buffer = typeof input === 'string' ? Buffer.from(input, 'utf-8') : input  // Basic file validation  const validation = validateFile(buffer, {    allowedFormats: ['svg'],    maxSize: 50 * 1024 * 1024 // 50MB limit  })  if (!validation.isValid) {    throw new FileValidationError(validation.error || 'Invalid SVG file')  }  // Check if input is actually SVG  const svgString = buffer.toString('utf-8').slice(0, 1000)  if (!svgString.includes('<svg') && !svgString.includes('<?xml')) {    throw new FileValidationError('File does not appear to be a valid SVG')  }}/** * SVG to GIF conversion handler using CloudConvert */export const svgToGifHandler: ConversionHandler = async (  input: Buffer | string,  options: SvgToGifOptions = {}): Promise<ConversionResult> => {  try {    // Validate input    validateSvgInput(input)    // Convert input to buffer    const inputBuffer = typeof input === 'string'       ? Buffer.from(input, 'utf-8')       : input    // Prepare CloudConvert options    const cloudConvertOptions: CloudConvertOptions & any = {      // Dimension options      ...(options.width && { width: options.width }),      ...(options.height && { height: options.height }),      preserveAspectRatio: options.fit === 'max',      // GIF-specific options      fit: options.fit || 'max',      strip: options.strip !== false,      pixel_density: options.pixelDensity || 300    }    // Use CloudConvert for SVG to GIF conversion    const result = await convertWithCloudConvert(      inputBuffer,      'svg',      'gif',      'image.svg',      cloudConvertOptions    )    if (!result.success) {      throw new ConversionError(        `CloudConvert SVG to GIF failed: ${result.error}`,        'CLOUDCONVERT_SVG_TO_GIF_FAILED'      )    }    if (!result.data) {      throw new ConversionError(        'CloudConvert SVG to GIF returned no data',        'CLOUDCONVERT_NO_DATA'      )    }    // Ensure we return Buffer data for GIF    const gifData = typeof result.data === 'string'       ? Buffer.from(result.data, 'base64')      : result.data    return {      success: true,      data: gifData,      mimeType: 'image/gif',      metadata: {        format: 'gif',        method: 'cloudconvert',        size: gifData.length,        engine: 'imagemagick',        originalFormat: 'svg',        width: options.width,        height: options.height,        fit: options.fit || 'max',        pixelDensity: options.pixelDensity || 300      }    }  } catch (error) {    if (error instanceof ConversionError) {      throw error    }    if (error instanceof FileValidationError) {      throw error    }    throw new ConversionError(      `Failed to convert SVG to GIF: ${error instanceof Error ? error.message : 'Unknown error'}`,      'SVG_TO_GIF_FAILED'    )  }}/** * SVG to GIF converter configuration */export const svgToGifConverter = {  name: 'SVG to GIF',  from: 'svg' as const,  to: 'gif' as const,  handler: svgToGifHandler,  isClientSide: false, // Uses CloudConvert API  description: 'Convert SVG images to GIF format using CloudConvert API'}// Export handler directly for convenienceexport default svgToGifHandler