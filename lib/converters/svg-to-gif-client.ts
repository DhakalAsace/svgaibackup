/** * SVG to GIF Client-Side Converter *  * This client-side implementation uses the API route to convert SVG to GIF * using CloudConvert on the server. This keeps API keys secure while providing * a seamless client experience. */import type {   ConversionHandler,  ConversionOptions,   ConversionResult,  ImageFormat} from './types'import {   ConversionError,  FileValidationError} from './errors'/** * Extended conversion options for SVG to GIF */interface SvgToGifOptions extends ConversionOptions {  /** Output width in pixels */  width?: number  /** Output height in pixels */  height?: number  /** Sets the mode of resizing: 'max', 'crop', 'scale' (default: 'max') */  fit?: 'max' | 'crop' | 'scale'  /** Remove metadata such as EXIF data (default: true) */  strip?: boolean  /** Resolution in pixels per inch (default: 300) */  pixelDensity?: number  /** Progress callback */  onProgress?: (progress: number) => void}/** * SVG to GIF conversion handler using API route */export const svgToGifHandler: ConversionHandler = async (  input: Buffer | string,  options: SvgToGifOptions = {}): Promise<ConversionResult> => {  try {    // Convert input to string if it's a buffer    const svgContent = input instanceof Buffer ? input.toString('utf-8') : input    // Basic validation    if (!svgContent.includes('<svg') && !svgContent.includes('<?xml')) {      throw new FileValidationError('File does not appear to be a valid SVG')    }    // Create FormData for API request    const formData = new FormData()    const svgBlob = new Blob([svgContent], { type: 'image/svg+xml' })    formData.append('file', svgBlob, 'image.svg')    // Add conversion options    if (options.width) formData.append('width', options.width.toString())    if (options.height) formData.append('height', options.height.toString())    if (options.fit) formData.append('fit', options.fit)    if (options.strip !== undefined) formData.append('strip', options.strip.toString())    if (options.pixelDensity) formData.append('pixelDensity', options.pixelDensity.toString())    // Set initial progress    options.onProgress?.(0.1)    // Make API request    const response = await fetch('/api/convert/svg-to-gif', {      method: 'POST',      body: formData,    })    options.onProgress?.(0.5)    if (!response.ok) {      const errorText = await response.text()      let errorMessage: string      try {        const errorJson = JSON.parse(errorText)        errorMessage = errorJson.error || errorJson.message || 'Conversion failed'      } catch {        errorMessage = errorText || `HTTP ${response.status}: ${response.statusText}`      }      throw new ConversionError(errorMessage, 'API_ERROR')    }    // Check if response is GIF    const contentType = response.headers.get('content-type')    if (!contentType?.includes('image/gif')) {      throw new ConversionError(`Unexpected content type: ${contentType}`, 'INVALID_RESPONSE')    }    options.onProgress?.(0.8)    // Get response as buffer    const arrayBuffer = await response.arrayBuffer()    const gifData = Buffer.from(arrayBuffer)    if (!gifData || gifData.length === 0) {      throw new ConversionError('No data received from conversion', 'EMPTY_RESPONSE')    }    options.onProgress?.(1)    return {      success: true,      data: gifData,      mimeType: 'image/gif',      metadata: {        format: 'gif',        method: 'cloudconvert',        size: gifData.length,        originalFormat: 'svg'      }    }  } catch (error) {    if (error instanceof ConversionError || error instanceof FileValidationError) {      throw error    }    throw new ConversionError(      `Failed to convert SVG to GIF: ${error instanceof Error ? error.message : 'Unknown error'}`,      'CLIENT_ERROR'    )  }}/** * SVG to GIF converter configuration */export const svgToGifConverter = {  name: 'SVG to GIF',  from: 'svg' as const,  to: 'gif' as const,  handler: svgToGifHandler,  isClientSide: true, // Client-side wrapper for server API  description: 'Convert SVG images to GIF format using CloudConvert API'}// Export handler directly for convenienceexport default svgToGifHandler