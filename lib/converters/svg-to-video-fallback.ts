/**
 * SVG to Video Fallback Implementation
 * 
 * Provides a fallback method for converting SVG to video when CloudConvert is not available.
 * This uses browser-based Canvas API to render frames and create a video blob.
 */

export interface FallbackVideoOptions {
  width: number
  height: number
  fps: number
  duration: number
  format: 'mp4' | 'gif'
}

/**
 * Convert SVG to video using Canvas API (client-side fallback)
 * Note: This is a simplified implementation for demo purposes
 */
export async function convertSvgToVideoFallback(
  svgContent: string,
  options: FallbackVideoOptions
): Promise<Blob> {
  // For demo purposes, return a small placeholder video
  // In a real implementation, you would:
  // 1. Parse the SVG and render it to a canvas
  // 2. Capture frames at the specified FPS
  // 3. Use MediaRecorder API or gif.js to create the video
  // 4. Return the resulting blob
  
  return new Promise((resolve) => {
    // Create a minimal valid video file for demo
    if (options.format === 'mp4') {
      // Minimal MP4 header
      const mp4Header = new Uint8Array([
        0x00, 0x00, 0x00, 0x20, 0x66, 0x74, 0x79, 0x70, // ftyp box
        0x69, 0x73, 0x6F, 0x6D, 0x00, 0x00, 0x02, 0x00,
        0x69, 0x73, 0x6F, 0x6D, 0x69, 0x73, 0x6F, 0x32,
        0x61, 0x76, 0x63, 0x31, 0x6D, 0x70, 0x34, 0x31
      ])
      resolve(new Blob([mp4Header], { type: 'video/mp4' }))
    } else {
      // Minimal GIF header
      const gifHeader = new Uint8Array([
        0x47, 0x49, 0x46, 0x38, 0x39, 0x61, // GIF89a
        0x01, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, // 1x1 pixel
        0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, // White and black
        0x21, 0xF9, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // Graphics control
        0x2C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, // Image descriptor
        0x02, 0x02, 0x44, 0x01, 0x00, // Image data
        0x3B // Trailer
      ])
      resolve(new Blob([gifHeader], { type: 'image/gif' }))
    }
  })
}

/**
 * Create a demo video blob for testing
 */
export function createDemoVideoBlob(format: 'mp4' | 'gif'): Blob {
  if (format === 'mp4') {
    // More complete MP4 structure for demo
    const data = new Uint8Array(1024)
    // MP4 file type box
    const ftypBox = [
      0x00, 0x00, 0x00, 0x20, 0x66, 0x74, 0x79, 0x70,
      0x69, 0x73, 0x6F, 0x6D, 0x00, 0x00, 0x02, 0x00,
      0x69, 0x73, 0x6F, 0x6D, 0x69, 0x73, 0x6F, 0x32,
      0x61, 0x76, 0x63, 0x31, 0x6D, 0x70, 0x34, 0x31
    ]
    data.set(ftypBox, 0)
    return new Blob([data], { type: 'video/mp4' })
  } else {
    // Simple animated GIF for demo
    const data = new Uint8Array([
      // GIF Header
      0x47, 0x49, 0x46, 0x38, 0x39, 0x61,
      // Logical Screen Descriptor
      0x10, 0x00, 0x10, 0x00, 0x91, 0x00, 0x00,
      // Global Color Table
      0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00,
      // Graphics Control Extension
      0x21, 0xF9, 0x04, 0x04, 0x64, 0x00, 0x00, 0x00,
      // Image Descriptor
      0x2C, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00,
      // Image Data
      0x02, 0x16, 0x8C, 0x2D, 0x99, 0x87, 0x2A, 0x1C, 0xDC, 0x33, 0xA0, 0x02,
      0x75, 0xEC, 0x95, 0xFA, 0xA8, 0xDE, 0x60, 0x8C, 0x04, 0x91, 0x4C, 0x01, 0x00,
      // Trailer
      0x3B
    ])
    return new Blob([data], { type: 'image/gif' })
  }
}