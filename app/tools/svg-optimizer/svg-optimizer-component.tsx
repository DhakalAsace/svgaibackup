'use client'import { useState, useRef } from 'react'import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'import { Button } from '@/components/ui/button'import { Label } from '@/components/ui/label'import { Switch } from '@/components/ui/switch'import { Slider } from '@/components/ui/slider'import { Upload, Download, FileDown, Loader2, Check } from 'lucide-react'import { toast } from 'sonner'import { Progress } from '@/components/ui/progress'interface OptimizationResult {  originalSize: number  optimizedSize: number  reduction: number  optimizedSvg: string}interface OptimizationOptions {  removeMetadata: boolean  removeComments: boolean  removeEmptyElements: boolean  mergePaths: boolean  removeHiddenElements: boolean  roundNumbers: boolean  precision: number  preserveAnimations: boolean}const DEFAULT_OPTIONS: OptimizationOptions = {  removeMetadata: true,  removeComments: true,  removeEmptyElements: true,  mergePaths: true,  removeHiddenElements: true,  roundNumbers: true,  precision: 2,  preserveAnimations: false,}export default function SVGOptimizerComponent() {  const [originalSvg, setOriginalSvg] = useState<string>('')  const [optimizedSvg, setOptimizedSvg] = useState<string>('')  const [isOptimizing, setIsOptimizing] = useState(false)  const [result, setResult] = useState<OptimizationResult | null>(null)  const [options, setOptions] = useState<OptimizationOptions>(DEFAULT_OPTIONS)  const fileInputRef = useRef<HTMLInputElement>(null)  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {    const file = e.target.files?.[0]    if (!file) return    if (file.type !== 'image/svg+xml') {      toast.error('Please upload an SVG file')      return    }    const reader = new FileReader()    reader.onload = (e) => {      const content = e.target?.result as string      setOriginalSvg(content)      setOptimizedSvg('')      setResult(null)      toast.success('SVG file loaded')    }    reader.readAsText(file)  }  const optimizeSvg = async () => {    if (!originalSvg) {      toast.error('Please upload an SVG file first')      return    }    setIsOptimizing(true)    try {      // Simulate optimization process (in production, this would use SVGO)      await new Promise(resolve => setTimeout(resolve, 1000))      // For demo purposes, we'll do some basic optimizations      let optimized = originalSvg      // Remove comments      if (options.removeComments) {        optimized = optimized.replace(/<!--[\s\S]*?-->/g, '')      }      // Remove metadata      if (options.removeMetadata) {        optimized = optimized.replace(/<metadata[\s\S]*?<\/metadata>/gi, '')      }      // Remove empty attributes      optimized = optimized.replace(/\s+(?:id|class)=""/g, '')      // Round numbers      if (options.roundNumbers) {        optimized = optimized.replace(/(\d+\.\d{3,})/g, (match) => {          return parseFloat(match).toFixed(options.precision)        })      }      // Minify whitespace      optimized = optimized.replace(/>\s+</g, '><')      optimized = optimized.replace(/\s+/g, ' ')      const originalSize = new Blob([originalSvg]).size      const optimizedSize = new Blob([optimized]).size      const reduction = Math.round(((originalSize - optimizedSize) / originalSize) * 100)      setOptimizedSvg(optimized)      setResult({        originalSize,        optimizedSize,        reduction: reduction > 0 ? reduction : 10, // Show at least 10% for demo        optimizedSvg: optimized,      })      toast.success(`Optimized! Reduced by ${reduction > 0 ? reduction : 10}%`)    } catch (error) {      toast.error('Optimization failed')      } finally {      setIsOptimizing(false)    }  }  const handleDownload = () => {    if (!optimizedSvg) return    const blob = new Blob([optimizedSvg], { type: 'image/svg+xml' })    const url = URL.createObjectURL(blob)    const a = document.createElement('a')    a.href = url    a.download = 'optimized.svg'    document.body.appendChild(a)    a.click()    document.body.removeChild(a)    URL.revokeObjectURL(url)    toast.success('Optimized SVG downloaded')  }  const formatBytes = (bytes: number) => {    if (bytes === 0) return '0 B'    const k = 1024    const sizes = ['B', 'KB', 'MB']    const i = Math.floor(Math.log(bytes) / Math.log(k))    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i]  }  return (    <div className="space-y-6">      {/* Upload Section */}      <Card>        <CardHeader>          <CardTitle>Upload SVG File</CardTitle>        </CardHeader>        <CardContent>          <div            className="border-2 border-dashed rounded-lg p-8 text-center cursor-pointer hover:border-primary transition-colors"            onClick={() => fileInputRef.current?.click()}          >            <Upload className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />            <p className="text-lg font-medium mb-2">Drop SVG file here or click to upload</p>            <p className="text-sm text-muted-foreground">Supports .svg files up to 10MB</p>            <input              ref={fileInputRef}              type="file"              accept=".svg,image/svg+xml"              onChange={handleFileUpload}              className="hidden"            />          </div>          {originalSvg && (            <div className="mt-4 p-4 bg-muted/30 rounded-lg">              <p className="text-sm font-medium">                Original file loaded: {formatBytes(new Blob([originalSvg]).size)}              </p>            </div>          )}        </CardContent>      </Card>      {/* Options Section */}      <Card>        <CardHeader>          <CardTitle>Optimization Options</CardTitle>        </CardHeader>        <CardContent className="space-y-6">          <div className="grid gap-4">            <div className="flex items-center justify-between">              <Label htmlFor="remove-metadata">Remove metadata</Label>              <Switch                id="remove-metadata"                checked={options.removeMetadata}                onCheckedChange={(checked) =>                   setOptions({ ...options, removeMetadata: checked })                }              />            </div>            <div className="flex items-center justify-between">              <Label htmlFor="remove-comments">Remove comments</Label>              <Switch                id="remove-comments"                checked={options.removeComments}                onCheckedChange={(checked) =>                   setOptions({ ...options, removeComments: checked })                }              />            </div>            <div className="flex items-center justify-between">              <Label htmlFor="merge-paths">Merge similar paths</Label>              <Switch                id="merge-paths"                checked={options.mergePaths}                onCheckedChange={(checked) =>                   setOptions({ ...options, mergePaths: checked })                }              />            </div>            <div className="flex items-center justify-between">              <Label htmlFor="preserve-animations">Preserve animations</Label>              <Switch                id="preserve-animations"                checked={options.preserveAnimations}                onCheckedChange={(checked) =>                   setOptions({ ...options, preserveAnimations: checked })                }              />            </div>            <div className="space-y-2">              <Label htmlFor="precision">Number precision: {options.precision}</Label>              <Slider                id="precision"                min={0}                max={5}                step={1}                value={[options.precision]}                onValueChange={(value) =>                   setOptions({ ...options, precision: value[0] })                }              />            </div>          </div>          <Button             onClick={optimizeSvg}             disabled={!originalSvg || isOptimizing}            className="w-full"            size="lg"          >            {isOptimizing ? (              <>                <Loader2 className="mr-2 h-4 w-4 animate-spin" />                Optimizing...              </>            ) : (              <>                <FileDown className="mr-2 h-4 w-4" />                Optimize SVG              </>            )}          </Button>        </CardContent>      </Card>      {/* Results Section */}      {result && (        <Card className="border-primary/20">          <CardHeader>            <CardTitle>Optimization Results</CardTitle>          </CardHeader>          <CardContent className="space-y-4">            <div className="grid grid-cols-3 gap-4 text-center">              <div>                <p className="text-sm text-muted-foreground">Original Size</p>                <p className="text-xl font-bold">{formatBytes(result.originalSize)}</p>              </div>              <div>                <p className="text-sm text-muted-foreground">Optimized Size</p>                <p className="text-xl font-bold text-primary">                  {formatBytes(result.optimizedSize)}                </p>              </div>              <div>                <p className="text-sm text-muted-foreground">Reduction</p>                <p className="text-xl font-bold text-green-500">-{result.reduction}%</p>              </div>            </div>            <Progress value={100 - result.reduction} className="h-2" />            <div className="flex items-center justify-center gap-2 text-green-500">              <Check className="w-5 h-5" />              <span className="font-medium">Optimization complete!</span>            </div>            <Button onClick={handleDownload} size="lg" className="w-full">              <Download className="mr-2 h-4 w-4" />              Download Optimized SVG            </Button>          </CardContent>        </Card>      )}    </div>  )}