import { NextRequest, NextResponse } from 'next/server'import { svgToGifHandler } from '@/lib/converters/svg-to-gif'import {   handleConverterError,   createConverterSuccessResponse } from '@/lib/converters/errors'export const runtime = 'nodejs'export const maxDuration = 60 // 60 seconds timeoutexport async function POST(request: NextRequest) {  try {    // Parse form data    const formData = await request.formData()    const file = formData.get('file') as File    if (!file) {      return NextResponse.json(        { error: 'No file provided' },        { status: 400 }      )    }    // Validate file type    const fileType = file.type.toLowerCase()    if (!fileType.includes('svg') && !file.name.toLowerCase().endsWith('.svg')) {      return NextResponse.json(        { error: 'Invalid file type. Please upload an SVG file.' },        { status: 400 }      )    }    // Read file content    const buffer = Buffer.from(await file.arrayBuffer())    // Get conversion options from form data    const options: any = {}    const width = formData.get('width')    const height = formData.get('height')    const fit = formData.get('fit')    const strip = formData.get('strip')    const pixelDensity = formData.get('pixelDensity')    if (width) options.width = parseInt(width as string, 10)    if (height) options.height = parseInt(height as string, 10)    if (fit) options.fit = fit as 'max' | 'crop' | 'scale'    if (strip !== null) options.strip = strip === 'true'    if (pixelDensity) options.pixelDensity = parseInt(pixelDensity as string, 10)    // Perform conversion    const result = await svgToGifHandler(buffer, options)    if (!result.success || !result.data) {      throw new Error('Conversion failed')    }    // Create response with GIF data    const response = new NextResponse(result.data, {      status: 200,      headers: {        'Content-Type': 'image/gif',        'Content-Disposition': `attachment; filename="converted-${Date.now()}.gif"`,        'Content-Length': result.data.length.toString(),        'Cache-Control': 'no-store, no-cache, must-revalidate',        'X-Conversion-Engine': 'cloudconvert',        'X-Original-Format': 'svg'      }    })    return response  } catch (error) {    console.error('[API] SVG to GIF conversion error:', error)    const errorResponse = handleConverterError(error)    // Determine status code based on error type    let statusCode = 500    if (error instanceof Error && 'statusCode' in error) {      statusCode = (error as any).statusCode    } else if (errorResponse.code === 'FILE_VALIDATION_FAILED' ||                errorResponse.code === 'UNSUPPORTED_FORMAT' ||               errorResponse.code === 'FILE_SIZE_EXCEEDED') {      statusCode = 400    }    return NextResponse.json(errorResponse, {       status: statusCode     })  }}