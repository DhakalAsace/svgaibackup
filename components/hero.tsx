"use client"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Check, Loader, Settings, ArrowRight, ChevronDown, ChevronUp, Sparkles, Download, ChevronLeft, ChevronRight } from "lucide-react"
import { Textarea } from "@/components/ui/textarea"
import { useRouter } from "next/navigation"
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { Database } from '@/types/database.types';
import Image from "next/image"
import { BrandLogo } from "@/components/brand-logo"
import { useSVGExamples } from "./svg-examples"
import Link from "next/link"

function formatStyleLabel(style: string) {
  return style
    .replace(/_/g, ' ')
    .replace(/\b\w/g, c => c.toUpperCase());
}

export default function Hero() {
  const [prompt, setPrompt] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)
  const [error, setError] = useState("")
  const [limitReachedError, setLimitReachedError] = useState("")
  const [userId, setUserId] = useState<string | null>(null)
  const [showCustomize, setShowCustomize] = useState(false)
  const [size, setSize] = useState("1024x1024")
  const [style, setStyle] = useState("any")
  const [aspectRatio, setAspectRatio] = useState("Not set")
  const router = useRouter()
  const supabase = createClientComponentClient<Database>()
  const [activeSlide, setActiveSlide] = useState(0)
  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);
  // New state for preloaded images
  const [preloadedImages, setPreloadedImages] = useState<Record<string, string>>({});
  const isInitialLoad = useRef(true);
  
  // Use the preloaded SVG examples instead of hardcoding them
  const examplesData = useSVGExamples();
  const featuredExamples = examplesData.length > 0 ? examplesData : [
    // Fallback examples in case the server data isn't available
    {
      src: "/svg-examples/minimalist-geometric-fox-head-logo-clean-lines-sin.svg",
      alt: "Minimalist geometric fox head SVG logo generated by AI",
      type: "Brand Logo",
      description: "Clean, modern fox logo created with AI. Perfect for businesses looking for a distinctive mark."
    },
    // Add other examples as fallback
    {
      src: "/svg-examples/cute-red-panda-mascot.svg",
      alt: "Cute red panda mascot SVG generated by AI",
      type: "Brand Mascot",
      description: "Charming red panda mascot, perfect for playful branding or apps. Instantly created by AI from text."
    }
  ];

  // Preload all SVGs once on component mount
  useEffect(() => {
    if (!isInitialLoad.current) return;
    
    const preloadSVGs = async () => {
      const imageCache: Record<string, string> = {};
      
      // Create promises for all example SVGs
      const preloadPromises = featuredExamples.map(async (example) => {
        try {
          const response = await fetch(example.src);
          if (!response.ok) throw new Error(`Failed to load ${example.src}`);
          
          // Store the data URL or blob URL to avoid network requests
          const svgText = await response.text();
          const dataUrl = `data:image/svg+xml;base64,${btoa(svgText)}`;
          imageCache[example.src] = dataUrl;
          
          return dataUrl;
        } catch (err) {
          console.error(`Error preloading SVG ${example.src}:`, err);
          return null;
        }
      });
      
      // Wait for all preloads to complete
      await Promise.all(preloadPromises);
      setPreloadedImages(imageCache);
      isInitialLoad.current = false;
    };
    
    preloadSVGs();
  }, [featuredExamples]);

  // Check for logged in user
  useEffect(() => {
    const checkUser = async () => {
      const { data: { session } } = await supabase.auth.getSession()
      setUserId(session?.user?.id || null)
    }

    checkUser()
  }, [])

  const handleGenerate = async () => {
    if (!prompt.trim()) return

    setIsGenerating(true)
    setError("")
    setLimitReachedError("")

    try {
      const response = await fetch("/api/generate-svg", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ 
          prompt,
          style,
          size,
          aspect_ratio: aspectRatio
        }),
      })

      // Safely parse JSON with fallback for text responses
      let responseData;
      try {
        // First try to parse as JSON
        responseData = await response.json();
      } catch (jsonError) {
        // If JSON parsing fails, try to get the response as text
        try {
          const textResponse = await response.text();
          console.error("Non-JSON response received:", textResponse);
          throw new Error(`Server returned non-JSON response: ${textResponse.substring(0, 100)}...`);
        } catch (textError) {
          console.error("Failed to get response as text:", textError);
          throw new Error(`Failed to parse server response (Status: ${response.status})`);
        }
      }
      
      // Check for specific error codes first
      if (response.status === 429) {
        setLimitReachedError(responseData.error || "You've reached your daily generation limit. Please try again tomorrow.")
        setIsGenerating(false)
        return
      }

      if (!response.ok) {
        throw new Error(responseData.error || `Failed to generate SVG (Status: ${response.status})`)
      }
      
      // If successful, redirect to results page with the SVG data
      if (responseData.success) {
        console.log("API response:", responseData);
        
        // Extract data from the response
        const data = responseData.data || {};
        
        if (data.svgUrl) {
          const { svgUrl, remainingGenerations } = data;
          
          // Store SVG URL in sessionStorage instead of URL params
          console.log('[Hero] Storing SVG URL in sessionStorage:', svgUrl);
          sessionStorage.setItem('resultSvgUrl', svgUrl);
          
          // Construct query string without the SVG URL
          const queryParams = new URLSearchParams();
          if (remainingGenerations !== undefined) {
            queryParams.set('remaining', remainingGenerations.toString());
          }
          queryParams.set('prompt', prompt); // Pass prompt for context

          const pushPath = `/results?${queryParams.toString()}`;
          console.log('[Hero] Pushing path:', pushPath);
          router.push(pushPath);
        } else {
          // Handle cases where success is true but svgUrl is missing
          console.error("API response indicates success but SVG URL is missing:", responseData);
          setError("The SVG was generated but the URL was not returned correctly. Please try again.");
          setIsGenerating(false);
        }
      } else {
        // Handle unsuccessful response
        console.error("API response indicates failure:", responseData);
        throw new Error(responseData.error || "Failed to generate SVG")
      }
    } catch (err) {
      console.error("Error in generation process:", err)
      // Set general error state, ensuring limit error isn't overridden if already set
      if (!limitReachedError) {
        // Check for specific error types
        const errMsg = err instanceof Error ? err.message : "Failed to generate SVG";
        
        // Provide more specific error message based on the error
        if (errMsg.includes("SVG URL")) {
          setError("The SVG was generated but couldn't be retrieved. Please try again.");
        } else if (errMsg.includes("fetch")) {
          setError("Network error while communicating with the server. Please check your connection and try again.");
        } else {
          setError(errMsg);
        }
        
        setIsGenerating(false)
      }
    } finally {
      // Ensure loading is always turned off unless limit error was set (handled above)
      if (!limitReachedError) {
        setIsGenerating(false)
      }
    }
  }

  // Auto-advance the slider every 5 seconds
  useEffect(() => {
    const timer = setInterval(() => {
      setActiveSlide((prev) => (prev + 1) % featuredExamples.length);
    }, 5000);
    
    return () => clearInterval(timer);
  }, []);

  const handleSlideChange = (index: number) => {
    setActiveSlide(index);
  };
  
  const handleNextSlide = () => {
    setActiveSlide((prev) => (prev + 1) % featuredExamples.length);
  };
  
  const handlePrevSlide = () => {
    setActiveSlide((prev) => (prev - 1 + featuredExamples.length) % featuredExamples.length);
  };

  // Size options available in the API
  const sizeOptions = [
    "1024x1024", "1365x1024", "1024x1365", "1536x1024", 
    "1024x1536", "1820x1024", "1024x1820", "1024x2048", 
    "2048x1024", "1434x1024", "1024x1434", "1024x1280", 
    "1280x1024", "1024x1707", "1707x1024"
  ];

  // Sort size options by area (width * height)
  const sortedSizeOptions = [...sizeOptions].sort((a, b) => {
    const [widthA, heightA] = a.split('x').map(Number);
    const [widthB, heightB] = b.split('x').map(Number);
    return (widthA * heightA) - (widthB * heightB);
  });

  // Style options available in the API
  const styleOptions = [
    "any", "engraving", "line_art", "line_circuit", "linocut"
  ];

  // Aspect ratio options available in the API
  const aspectRatioOptions = [
    "Not set", "1:1", "4:3", "3:4", "3:2", "2:3", "16:9", "9:16", 
    "1:2", "2:1", "7:5", "5:7", "4:5", "5:4", "3:5", "5:3"
  ];

  // Sort aspect ratio options lexicographically, keeping "Not set" first
  const sortedAspectRatioOptions = [...aspectRatioOptions].sort((a, b) => {
    if (a === "Not set") return -1; // Keep "Not set" first
    if (b === "Not set") return 1;
    // Use default string comparison for lexicographical order
    return a.localeCompare(b);
  });

  // Sample prompts for inspiration
  const samplePrompts = [
    {
      label: "Cute Red Panda",
      prompt: "Cute cartoon red panda mascot waving enthusiastically, full body view. Simple flat design style with thick outlines. Vibrant orange, white face markings, dark brown limbs. Friendly expression, big eyes. Clean vector illustration."
    },
    {
      label: "Eco Brand Logo",
      prompt: "Minimalist vector logo SVG for an eco-friendly brand named 'TerraBloom'. The design should cleverly integrate a simple, geometric stylized sprouting plant seedling shape within or adjacent to the word 'TerraBloom'. Use a modern, clean sans-serif typeface for the text. The plant element should use a vibrant, fresh green. The text 'TerraBloom' should be in a sophisticated, deep charcoal grey. Overall style is flat design, focusing on clean lines, elegant simplicity, and balanced composition. No gradients, no shadows, no background shapes or containers, purely the logomark and logotype on a transparent background. Ensure crisp vector paths."
    },
    {
      label: "Coffee Cup Line Art",
      prompt: "Detailed single-line art vector illustration of a steaming coffee cup on a saucer surrounded by swirling abstract coffee beans. Continuous line style. Monochromatic dark brown color. Intricate linework but clean vector paths, focus on flowing lines."
    },
    {
      label: "Space Rocket",
      prompt: "Vector illustration depicting a simple cartoon rocket ship soaring through space past stylized planets and stars. Flat design style with bold shapes and colors. Deep space blue background, vibrant orange rocket flames, red rocket body, ringed Saturn-like planet in purple and yellow, white stars. Whimsical and adventurous mood."
    },
    {
      label: "Kawaii Sticker Set",
      prompt: "Set of 3 vector SVG stickers: a smiling kawaii-style cat holding a heart, a cheerful Corgi dog sitting, a happy little cloud raining tiny hearts. Simple cartoon style, thick black outlines, minimal flat color fills using pastel pink, light blue, soft yellow, and white accents. Rounded shapes, big expressive eyes. Each sticker separate."
    }
  ];

  return (
    <section className="bg-gradient-to-b from-[#f8f9fa] to-white py-6 md:py-10">
      <div className="container mx-auto px-4 max-w-6xl">
        {/* Top badge - minimal and subtle */}
        <div className="flex justify-center mb-6">
          <div className="relative w-[156px] h-[80px] mb-3 flex items-center justify-center">
            <Image 
              src="/laurel.svg" 
              alt="Award laurel - #1 Rated SVG AI Tool" 
              width={156} 
              height={80}
              priority={true} // Mark as LCP image
              className="object-contain absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 pointer-events-none select-none" 
            />
            <div className="relative flex flex-col items-center justify-center w-full h-full">
              <span className="text-center font-bold text-black text-base leading-none">#1</span>
              <span className="text-center font-bold text-black text-[15px] leading-none">SVG AI Tool</span>
              <div className="flex justify-center mt-1">
                {[...Array(5)].map((_, i) => (
                  <Image 
                    key={i}
                    src="/star.svg" 
                    alt="5-star rating for SVG AI" 
                    width={14} 
                    height={14} 
                    className="mx-[1.5px]" 
                  />
                ))}
              </div>
            </div>
          </div>
        </div>
        
        {/* Main heading - clean and impactful */}
        <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold text-center mb-4 leading-tight">
          <span className="text-black">AI </span>
          <span className="bg-clip-text text-transparent bg-gradient-to-r from-[#FF7043] to-[#FFA726]">SVG Generator:</span>
          <br />
          <span className="text-black">Effortless Text to SVG Conversion</span>
        </h1>
        
        <p className="text-center text-[#495057] text-lg md:text-xl max-w-2xl mx-auto mb-6">
          Effortlessly convert text to SVG with AI. Generate unique vector <Link href="/ai-icon-generator" className="text-[#FF7043] hover:underline">icons</Link>, logos, and illustrations instantly.
        </p>
        
        {/* Breadcrumbs for better SEO and navigation */}
        <nav aria-label="Breadcrumb" className="flex justify-center mb-8">
          <ol className="flex items-center space-x-2 text-sm text-gray-500">
            <li><span className="font-medium">SVG AI Home</span></li>
            <li className="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mx-1 h-3 w-3"><polyline points="9 18 15 12 9 6"></polyline></svg>
              <Link href="/ai-icon-generator" className="hover:text-[#FF7043] hover:underline">AI Icon Generator</Link>
            </li>
            <li className="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mx-1 h-3 w-3"><polyline points="9 18 15 12 9 6"></polyline></svg>
              <Link href="/blog" className="hover:text-[#FF7043] hover:underline">SVG Tutorials</Link>
            </li>
          </ol>
        </nav>

        <div className="grid grid-cols-1 lg:grid-cols-5 gap-8 items-start">
          {/* Main input area - 3/5 width on desktop */}
          <div className="lg:col-span-3 bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
            <div className="p-6">
              <textarea
                id="prompt-input"
                className="w-full rounded-lg border border-gray-200 bg-[#FAFAFA] py-4 px-4 text-base md:text-lg text-[#212529] placeholder-gray-400 focus:border-[#FF7043] focus:outline-none focus:ring-1 focus:ring-[#FF7043]/30 resize-none min-h-[140px] transition-all"
                placeholder="Describe the SVG you want to create..."
                value={prompt}
                onChange={e => setPrompt(e.target.value)}
                aria-label="Enter text prompt for AI SVG generation"
                autoFocus
              />
              
              {/* Sample prompts */}
              <div className="mt-3 flex flex-wrap gap-2">
                {samplePrompts.map((samplePrompt, idx) => (
                  <button 
                    key={idx}
                    onClick={() => setPrompt(samplePrompt.prompt)}
                    className="text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 px-2 py-1 rounded-full transition-colors"
                  >
                    {samplePrompt.label}
                  </button>
                ))}
              </div>
              
              {/* Advanced Settings Toggle Button */}
              <button 
                onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
                className="mt-4 flex items-center justify-center text-sm font-medium text-[#495057] hover:text-[#FF7043] transition-colors"
              >
                <Settings size={16} className="mr-2" />
                Advanced Settings
              </button>

              {/* Collapsible Advanced Options Section */}
              {showAdvancedOptions && (
                <div className="mt-4 grid grid-cols-3 gap-4 border-t border-gray-100 pt-4">
                  {/* Style dropdown */}
                  <div>
                    <label htmlFor="style-select" className="block text-sm font-medium text-gray-700 mb-1">Style</label>
                    <select
                      id="style-select"
                      className="w-full rounded-md border-gray-200 bg-white text-sm text-gray-700 py-1.5"
                      value={style}
                      onChange={e => setStyle(e.target.value)}
                    >
                      {styleOptions.map((option) => (
                        <option key={option} value={option}>
                          {option === 'any' ? 'Any Style' : formatStyleLabel(option)}
                        </option>
                      ))}
                    </select>
                  </div>
                  {/* Size dropdown */}
                  <div>
                    <label htmlFor="size-select" className="block text-sm font-medium text-gray-700 mb-1">Size</label>
                    <select
                      id="size-select"
                      className="w-full rounded-md border-gray-200 bg-white text-sm text-gray-700 py-1.5"
                      value={size}
                      onChange={e => setSize(e.target.value)}
                    >
                      {sortedSizeOptions.map((option) => (
                        <option key={option} value={option}>{option}</option>
                      ))}
                    </select>
                  </div>
                  {/* Aspect Ratio dropdown */}
                  <div>
                    <label htmlFor="aspect-ratio-select" className="block text-sm font-medium text-gray-700 mb-1">Ratio</label>
                    <select
                      id="aspect-ratio-select"
                      className="w-full rounded-md border-gray-200 bg-white text-sm text-gray-700 py-1.5"
                      value={aspectRatio}
                      onChange={e => setAspectRatio(e.target.value)}
                    >
                      {sortedAspectRatioOptions.map((option) => (
                        <option key={option} value={option}>{option}</option>
                      ))}
                    </select>
                  </div>
                </div>
              )}
              
              {/* Generate button */}
              <button
                className="w-full mt-5 py-3.5 bg-gradient-to-r from-[#FF7043] to-[#FFA726] text-white font-medium text-base rounded-lg shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-[#FF7043]/40 disabled:opacity-60 disabled:cursor-not-allowed transition-all"
                onClick={handleGenerate}
                disabled={isGenerating || !prompt.trim()}
              >
                {isGenerating ? (
                  <span className="flex items-center justify-center">
                    <Loader className="animate-spin mr-2 h-5 w-5" />
                    Creating your SVG (usually 15-30 seconds)...
                  </span>
                ) : (
                  "Generate SVG"
                )}
              </button>
              
              {/* Error message */}
              {(error || limitReachedError) && (
                <div className="mt-3 text-sm text-red-600 bg-red-50 p-3 rounded-md">
                  {error || limitReachedError}
                </div>
              )}
            </div>
          </div>
          
          {/* Example showcase - 2/5 width on desktop */}
          <div className="lg:col-span-2 bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
            <div className="p-6">
              <h2 className="text-base font-medium text-gray-800 mb-4">Example SVGs</h2>
              
              {/* Main image showcase with cleaner controls */}
              <div className="relative aspect-square bg-[#FAFAFA] rounded-lg mb-4 flex items-center justify-center border border-gray-100">
                {preloadedImages[featuredExamples[activeSlide]?.src] ? (
                  // Use preloaded data URL instead of making a network request
                  <Image
                    src={preloadedImages[featuredExamples[activeSlide]?.src]}
                    alt={featuredExamples[activeSlide].alt}
                    width={400}
                    height={400}
                    className="object-contain max-w-[85%] max-h-[85%]"
                  />
                ) : (
                  // Fallback to normal loading if preload failed
                  <Image
                    src={featuredExamples[activeSlide].src}
                    alt={featuredExamples[activeSlide].alt}
                    width={400}
                    height={400}
                    className="object-contain max-w-[85%] max-h-[85%]"
                  />
                )}
                
                {/* Navigation buttons - more subtle */}
                <button
                  className="absolute left-2 z-10 bg-white/90 hover:bg-white w-8 h-8 flex items-center justify-center rounded-full shadow-sm border border-gray-200 transition-colors"
                  onClick={handlePrevSlide}
                  aria-label="Previous example"
                >
                  <ChevronLeft className="w-4 h-4 text-gray-600" />
                </button>
                
                <button
                  className="absolute right-2 z-10 bg-white/90 hover:bg-white w-8 h-8 flex items-center justify-center rounded-full shadow-sm border border-gray-200 transition-colors"
                  onClick={handleNextSlide}
                  aria-label="Next example"
                >
                  <ChevronRight className="w-4 h-4 text-gray-600" />
                </button>
              </div>
              
              {/* Indicator dots - minimal */}
              <div className="flex justify-center gap-1.5 mb-3">
                {featuredExamples.map((_, idx) => (
                  <button
                    key={idx}
                    onClick={() => handleSlideChange(idx)}
                    className={`w-1.5 h-1.5 rounded-full transition-colors ${
                      activeSlide === idx ? 'bg-[#FF7043]' : 'bg-gray-200 hover:bg-gray-300'
                    }`}
                    aria-label={`View example ${idx + 1}`}
                  />
                ))}
              </div>
              
              {/* Example info */}
              <div className="text-center">
                <span className="inline-block text-xs font-medium text-[#4E342E] bg-[#FFF8F1] border border-[#FF7043] px-2 py-0.5 rounded-full mb-2">
                  {featuredExamples[activeSlide].type}
                </span>
                <p className="text-sm text-gray-600 leading-snug">
                  {featuredExamples[activeSlide].description}
                </p>
              </div>
            </div>
          </div>
        </div>
        
        {/* SEO enhanced feature links */}
        <div className="max-w-4xl mx-auto mt-10 mb-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
            <div className="p-4 bg-white rounded-lg border border-gray-100 shadow-sm">
              <h3 className="font-medium text-base mb-2">Create Vector Icons</h3>
              <p className="text-sm text-gray-600 mb-2">Generate beautiful SVG icons from text descriptions</p>
              <Link href="/ai-icon-generator" className="text-[#FF7043] hover:underline text-sm inline-flex items-center">
                Try AI Icon Generator
                <ArrowRight className="ml-1 h-3 w-3" />
              </Link>
            </div>
            
            <div className="p-4 bg-white rounded-lg border border-gray-100 shadow-sm">
              <h3 className="font-medium text-base mb-2">AI Logo Creation</h3>
              <p className="text-sm text-gray-600 mb-2">Design professional SVG logos with artificial intelligence</p>
              <span className="text-[#FF7043] hover:underline text-sm inline-flex items-center cursor-pointer" onClick={() => setPrompt(samplePrompts[1].prompt)}>
                Try Logo Generator
                <ArrowRight className="ml-1 h-3 w-3" />
              </span>
            </div>
            
            <div className="p-4 bg-white rounded-lg border border-gray-100 shadow-sm">
              <h3 className="font-medium text-base mb-2">SVG Tutorials</h3>
              <p className="text-sm text-gray-600 mb-2">Learn how to create and use SVG graphics effectively</p>
              <Link href="/blog" className="text-[#FF7043] hover:underline text-sm inline-flex items-center">
                Read SVG Guides
                <ArrowRight className="ml-1 h-3 w-3" />
              </Link>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
