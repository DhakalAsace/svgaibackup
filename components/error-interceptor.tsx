'use client'import { useEffect } from 'react'export function ErrorInterceptor() {  useEffect(() => {    // Intercept all errors    const originalError = window.console.error    window.console.error = (...args) => {      // Check if it's the sharp error      const errorString = args.join(' ')      if (errorString.includes('sharp is not defined')) {        // Try to get the error object        const errorObj = args.find(arg => arg instanceof Error)        if (errorObj) {          }      }      // Call original console.error      originalError.apply(console, args)    }    // Global error handler    const handleError = (event: ErrorEvent) => {      if (event.message.includes('sharp is not defined')) {        }    }    // Unhandled promise rejection handler    const handleRejection = (event: PromiseRejectionEvent) => {      const reasonString = String(event.reason)      if (reasonString.includes('sharp is not defined')) {        if (event.reason instanceof Error) {          }      }    }    window.addEventListener('error', handleError)    window.addEventListener('unhandledrejection', handleRejection)    // Log that interceptor is active    return () => {      window.console.error = originalError      window.removeEventListener('error', handleError)      window.removeEventListener('unhandledrejection', handleRejection)    }  }, [])  return null}